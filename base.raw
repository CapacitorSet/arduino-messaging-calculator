#define MESSAGING_INTERFACE $messagingInterface
// Change to Serial if you want to debug the messaging feature using the serial monitor.
// Don't forget to set the line ending to "NL only"!

// Configuration
#define DEBUG         $debug    // Print debug messages to Serial?
#define SHIFT_KEY_PIN $shiftPin // On which pin is the Shift key?
#define CTRL_KEY_PIN  $ctrlPin  // On which pin is the Ctrl key?
#define LCD_COLS      $lcdCols  // How many columns does the LCD display have?
#define LCD_ROWS      $lcdRows  // How many rows does the LCD display have?
#define KEYPAD_ROWS   4
#define KEYPAD_COLS   4
char keys[KEYPAD_ROWS][KEYPAD_COLS] = {
	{'1','2','3','+'},
	{'4','5','6','-'},
	{'7','8','9','*'},
	{'S','0','D','/'}
};
byte rowPins[KEYPAD_ROWS] = {$keypadRow1, $keypadRow2, $keypadRow3, $keypadRow4};
byte colPins[KEYPAD_COLS] = {$keypadCol1, $keypadCol2, $keypadCol3, $keypadCol4};
#define RESULT_PRECISION 8
#define RESULT_MAX_SIZE 64

#define BT_BAUDRATE 38400

#include "infix_postfix.h"
#include "evaluate_postfix.h"
#include "conversion_tools.h"
#include "ShrunkLiquidCrystal.h"
#include "Keypad.h"
#include <EEPROM.h>

// Initialize the LCD object with the appropriate pins
ShrunkLiquidCrystal lcd;
// Initialize the keypad with the appropriate data
Keypad customKeypad = Keypad(makeKeymap(keys), rowPins, colPins);

/* Multitap stuff */
char prevKey = '\0';    // The previous key
int tapCount = 0;       // The number of consecutive taps so far
unsigned long time = 0; // The timestamp of the latest tap

/* Writing stuff */
String buffer;                       // Contiene l'espressione letta dal parser
String expression;                   // Contiene il testo mostrato sull'LCD
bool textMode = false;               // Indica se la text mode Ã¨ attiva o no
unsigned int latestExpressionLength[100]; // So that backspace works correctly with multi-character items like "log" or "tan"
char currentExpr;
char messaggi[500];                 // La coda dei messaggi ricevuti
unsigned int posizioneMessaggi = 0; // La posizione attuale nello stack
unsigned int nuoviMessaggi = 0;      // Il numero di messaggi non letti

bool waitingForMemoryAddress = false; // Si sta aspettando un indirizzo dall'utente?
bool waitingForData = false;          // Si sta aspettando dei dati (da scrivere in EEPROM)?
String memoryAddress;                 // Stores the memory address between loop() calls

struct ExpressionStack {
  unsigned int length[100]; // So that backspace works correctly with multi-character items like "log" or "tan"
  unsigned int currentExpr;  
};

struct ExpressionStack latestExpression;

/* Setup the serial interfaces and the pushbutton pins */
void setup () {
	#if DEBUG
		// Enable the Serial interface for sending debug messages
		Serial.begin (9600);
	#endif
	MESSAGING_INTERFACE.begin(BT_BAUDRATE);

	lcd.print("Tette *-*"); // lol

	pinMode(SHIFT_KEY_PIN, INPUT_PULLUP); // "Keys" are pushbuttons, so they must be read using pullup resistors
	pinMode(CTRL_KEY_PIN, INPUT_PULLUP);

        latestExpression.currentExpr = 0;
}

/* Deal with the buffer and the expression [todo: that expression-length-as-stack stuff] */
void ManageKey(String toBuffer, String toExpression, String &buffer, String &expression) {
	buffer     += toBuffer;
	expression += toExpression;
	latestExpression.length[latestExpression.currentExpr++] = toExpression.length();
}

/* Appropriately print an expression to the LCD display (deals with autoscroll and stuff) */
void printExpr(String expression) {
	#if DEBUG
		Serial.print("Printing ");
		Serial.println(expression);
	#endif

	lcd.print(expression);

    if(expression.length() > LCD_COLS - 1) { // If the text is longer than the whole screen
		#if DEBUG
			Serial.println("Autoscrolling");
		#endif
		for (int i = 0; i <= expression.length() - LCD_COLS; i++) {
			lcd.scrollDisplayLeft(); // Scroll left exactly expression.length() - LCD_COLS times
		}
	}
}

/* Get the first address of the Nth block */
int getFirstPositionOfBlock(int block) {
	const int realAddress = 63 * (block - 1);
	/*
	 * The code above is equivalent to:
	 *
	 *     blockNum = block--; // Because non-programmers begin counting from 1
	 *     realAddress = 64*blockNum; // The first block starts at 0, the second one starts at 64, the third one at 128...
	 *
	*/
	return realAddress;
}

/* Send a message on the messaging interface */
void send(String message) {
	MESSAGING_INTERFACE.print(message); // Don't you dare simplify this to .println! .println uses \r\n as a line terminator, whereas this programme uses \n.
	MESSAGING_INTERFACE.print('\n');
	#if DEBUG
		Serial.print("<- ");
		Serial.println(expression);
	#endif
}

void loop () {
	const char key = customKeypad.getKey();
	bool printExpression = true;
	bool clearScreen = true;
	char toBuffer[5], toExpression[10];

	if (key) {
		// La lettura e' negata perche' i pin con i pullup sono attivi bassi.
		const bool shift = !digitalRead(SHIFT_KEY_PIN);
		const bool ctrl  = !digitalRead(CTRL_KEY_PIN);

		/* Multitap management */
		if (textMode == true) {
			// If the last tap was <1 second ago
			if (key == prevKey && (millis() - time) < 1000) {
					// Register a new tap
					tapCount++;
					// Remove the last element inserted in the buffer
					buffer = buffer.substring(0, buffer.length() - 1);
					// and in the expression
					expression = expression.substring(0, expression.length() - latestExpression.length[latestExpression.currentExpr]);
			} else { // If the last tap was too long ago
				// Consider the current tap as a "new" one
				tapCount = 0;
				prevKey = '\0';
			}
			time = millis(); // Record the time of this tap for future reference
		}

		/* Custom keypress behaviour */
		switch (key) {
			case '0':
				/* Shift+0 in text mode
				 *
				 * Displays the message count
				 */
				if (textMode && shift && !ctrl) {
					printExpression = false;
					clearScreen = false;
					// Allocate 4 characters for the message count (0...9999)
					char messageCount[4]; 
					lcd.setCursor(0, 1);
					lcd.write("                "); // Sedici spazi, in modo da clearare la riga sotto
					lcd.setCursor(0, 1); // E torna all'inizio
					itoa(nuoviMessaggi, messageCount, 10);
					lcd.write(messageCount);
					lcd.write(" nuovi messaggi");
				}
				break;
			case '5':
				/* Shift+Ctrl+5
				 *
				 * Toggles text mode
				 */
				if (shift && ctrl) {
					printExpression = false;
					clearScreen = false;
					bool doesPinMatch = true;
					for (int i = 0; i < 16; i++) {
						doesPinMatch &= (EEPROM.read(1024-16+i) == expression[i]);
					}
					if (doesPinMatch) {
						textMode = !textMode;
						#if DEBUG
							Serial.println("Toggling text mode");
						#endif
					}
				}
				break;
			case 'S':
				/* Shift+Ctrl+S
				 *
				 * Scrolls the display to the right
				 */
				if (shift && ctrl) {
					printExpression = false;
					clearScreen = false;
					lcd.scrollDisplayRight(); // That's *right*, it's not a typo. This is what the users perceive as "natural" scrolling.
				} else
				/* Shift+S
				 * 
				 * Writes to the EEPROM
				 */
				if (shift && !ctrl) {
					printExpression = false;
					clearScreen = false;

					// Note that the first case that will be executed is the else case

					// If we're expecting an address
					if (waitingForMemoryAddress == true) { 
						waitingForMemoryAddress = false;
						waitingForData = true;
						memoryAddress = buffer; // Holds the user input between calls to loop()
						buffer = "";
						expression = "";
						lcd.setCursor(0, 0);
						lcd.write("Contenuto?");
					} else
					// If we're expecting data
					if (waitingForData == true) {
						waitingForData = false;
						const int realAddress = getFirstPositionOfBlock(memoryAddress.toInt());
						for (int i = 0; i < 64; i++) {
							// Read 64 bytes from expression and copy them to the EEPROM
							EEPROM.write(realAddress + i, expression[i]);
						}

						lcd.setCursor(0,0);
						lcd.print("Scritto in ");
						lcd.print(memoryAddress);
					} else
					// If the key has just been pressed
					{
						lcd.setCursor(0, 0);
						lcd.write("Posizione?");
						buffer = "";
						expression = "";
						waitingForMemoryAddress = true;
					}
				} else
				/* Ctrl+S
				 *
				 * Reads the EEPROM.
				 */
				if (!shift && ctrl) {
					printExpression = false;
					clearScreen = false;

					// Note that the first case to be executed is the else case

					// If we're expecting a memory address
					if (waitingForMemoryAddress == true) {
						waitingForMemoryAddress = false;
						waitingForData = true;
						memoryAddress = buffer;
						buffer = "";
						expression = "";
						const int realAddress = getFirstPositionOfBlock(memoryAddress.toInt());
						lcd.setCursor(0, 0);
						for (int i = 0; i < 64; i++) {
							char carattere = EEPROM.read(realAddress + i);
							if (carattere != '\0') {
								lcd.write(EEPROM.read(realAddress + i));
							}
						}
					} else
					// If the key has just been pressed
					{
						lcd.setCursor(0, 0);
						lcd.write("Posizione?");
						buffer = "";
						expression = "";
						waitingForMemoryAddress = true;
					}
				} else
				/* S [Text Mode]
				 *
				 * Sends a message.
				 */
				if (!shift && !ctrl && textMode) {
					printExpression = false;
					clearScreen = false;
					send(buffer);
					buffer = "";
					expression = "";
					lcd.setCursor(0, 1);
					lcd.write("Inviato!");
				} else
				/* S
				 *
				 * Evaluates the current expression.
				 */
				if (!shift && !ctrl && !textMode) {
					printExpression = false;
					clearScreen = false;

					lcd.setCursor(0, 1);
					String postfix;
					double numeratore;
					int divisore;
//					double* prevAns; // to be implemented
					char value[RESULT_MAX_SIZE]; // The result, as a char*

					#if DEBUG
						Serial.print("Infix: ");
						Serial.println(buffer);
					#endif
					
					// try to convert the infix expression to postfix
					if (infix_postfix (buffer, postfix)) {
						#if DEBUG
							Serial.print("Postfix: ");
							Serial.println(postfix);
						#endif

						// try to evaluate the postfix expression
						if (evaluate_postfix (postfix, numeratore, divisore)) {
							// casta il numeratore a string
							double_string (value, numeratore, RESULT_PRECISION);

							lcd.print(value);
							// se c'e' un divisore
							if (divisore != 1) {
								lcd.print('/');
								// castalo a string prima di printarlo
								itoa(divisore, value, 10);
								lcd.print(value);
							}
						} else
						// if the postfix expression couldn't be evaluated
						{
							lcd.write("Can'tEvalPostfix");
						}
					} else
					// If the infix expression could not be converted to postfix
					{
						lcd.write("CantConvert2Infx");
					}
					buffer     = "";
					expression = "";					
				}
				break;
			case 'D':
				/* Shift+Ctrl+D
				 *
				 * Scrolls the display to the left.
				 */
				if (shift && ctrl) {
					printExpression = false;
					clearScreen = false;
					lcd.scrollDisplayLeft(); // See the comment on Shift+Ctrl+S
				} else
				/* Shift+D [Text Mode]
				 *
				 * Shows the earliest unread message and pops it from the queue
				 */
				if (textMode && shift && !ctrl) {
					printExpression = false;
					clearScreen = false;

					lcd.clear();
					lcd.setCursor(0, 0);
					if (nuoviMessaggi == 0) {
						lcd.write("Nessun messaggio");
					} else {
						char character;
						do { // Keep popping until \0
							character = messaggi[posizioneMessaggi--];
							if (character != '\0') lcd.write(character);
						} while (character != '\0');
						nuoviMessaggi--;
					}
				} else {
					buffer = buffer.substring(0, buffer.length() - 1);
					expression = expression.substring(0, expression.length() - latestExpression.length[latestExpression.currentExpr]);
                                        latestExpression.currentExpr--;
					prevKey = '\0'; // E' difficile da spiegare, ma va tenuto altrimenti non si comporta in modo naturale per l'utente.
					// ^ Ora non ho neanche idea di come funzioni, quindi: TODO: capire perchÃ© c'Ã¨ la riga sopra. - CapacitorSet
				}
				break;
		}

		switch (key) {
			/* KEYS */
			// Don't delete the comment above, it is required by make.js.
			// If you wish to implement custom behaviour for a key, do so in the switch statement above this one.
		}

		if (clearScreen == true) {
			lcd.clear();
		}

		if (printExpression == true) {
			lcd.setCursor(0, 0);
			printExpr(expression);
		}
		prevKey = key;
	}

	// As soon as serial data is available
	if (MESSAGING_INTERFACE.available()) {
		// Read a character
		char inChar = MESSAGING_INTERFACE.read();
		#if DEBUG
			Serial.print("-> ");
			Serial.println(inChar);
		#endif
		// If the end of the message was reached
		if (inChar == '\n') {
			#if DEBUG
				Serial.println("Nuovo messaggio queued");
			#endif
			// Aggiungi un fine stringa anziche' un newline
			inChar = '\0';
			nuoviMessaggi++;
		}
		// Pusha il carattere nello stack di messaggi
		messaggi[posizioneMessaggi++] = inChar;
	}
}